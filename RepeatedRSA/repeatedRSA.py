import math

C = 22046878763111766556708573939366825314457524262066677294443269384032004545368676791812320950870402887044374786556474869577341773755182267545682554459385423565725270917941072199086023902044761690241209540288363378671287460397238931083184535640783005966758248181235450061796353292019504117743120149676503667407552401263454263988015026201664384019275192622764684934841858153863787006594140430208658266836889498708409806026160759574995724206749995164842197733823264306225481519512333596546913886486430908652209061530059183596607413371387128827870892684371999844770030031408003584377673446954169900647696498465458464343849

n1 = 24050857202006767332295951287304009871658804256330623563696806508792420371265937495942261652658715658357118862067987545943980241131267413777358573189419538397708575702851727057199912153842886554240639232015985143241337553469178276801563788106170710481661398591771705480378098548736001196374835450752187113153467567858228218722414625262093438396908877549380195731297850442897110722082319040947440994364586068737595392302390566126378027467686059051056191408055304137671316871174688658968229329475723907566587449190165124750607532990935197044778149384992865738989699686276947671963946425586733118692700195188960111057389

n2 = 22706377603467316298883216623902305163969324250533639957479857794546762143903782533343496093247379648947676590966360041205637855052910487105103872081231711790352602896803303935260087724669922325179265239950454918544888307683049213716263145691539010143776870537423820135884174621484441516839623246593678010663085887971585806911373448819878691277193342709029667087219906807707827230046369778589532090743673526677486495653445660287048132130687562020475617304431196563001843591177911429875014784061205100065737073746144984704093450369045713407667666656468117947537473967566946356582983926169054947213793891756141140368319

n3 = 28733153496667889313958627873528389494996306130112575300277708521593931489228121465174644142273299143891416209719224669983691565360246750855639794425948801789999540762184911824083985794985289381228158081656297724826624299148388421253250942640161899243214623597099149234378884295480097604683774206956018160833526543706426782554366291355215001700522073357410805815938710378528735078840671069757064784641867770895679731950903938464651671110109777165436126545399751066644471000315438723375308555645821205526595201253954844557396517267288371331542820098653716118912699788569269817309205387865450359496039431835144736539851

e = 65537

g12 = math.gcd(n1, n2)
g13 = math.gcd(n1, n3)
g23 = math.gcd(n2, n3)

print("gcd(n1,n2) =", g12)
print("gcd(n1,n3) =", g13)
print("gcd(n2,n3) =", g23)

if g12 in (1, n1, n2) or g13 in (1, n1, n3) or g23 in (1, n2, n3):
    raise SystemExit("No shared prime factor detected.")

p = g12
q = g13
r = g23

assert n1 == p * q
assert n2 == p * r
assert n3 == q * r

print("\nRecovered primes:")
print("p =", p)
print("q =", q)
print("r =", r)

phi1 = (p - 1) * (q - 1)
phi2 = (p - 1) * (r - 1)
phi3 = (q - 1) * (r - 1)

d1 = pow(e, -1, phi1)
d2 = pow(e, -1, phi2)
d3 = pow(e, -1, phi3)

c_after_n3 = pow(C, d3, n3)
c_after_n2 = pow(c_after_n3, d2, n2)
m = pow(c_after_n2, d1, n1)

m_bytes = m.to_bytes((m.bit_length() + 7) // 8, 'big')
print("\nRecovered message (hex):", m.to_bytes((m.bit_length() + 7) // 8, 'big').hex())
try:
    decoded = m_bytes.decode('utf-8')
except Exception as exc:
    decoded = "<decode error: {}>".format(exc)

print("Recovered message (utf-8):", decoded)
